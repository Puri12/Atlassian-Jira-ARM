---
# NOTE: This file is generated from `bitbucket-pipelines.yml.j2` via `pipelines-generator.py`:
#
#     python3 pipelines-generator.py > bitbucket-pipelines.yml

image: python:3.9-alpine

definitions:
  services:
    docker:
      memory: 4096

options:
  size: 2x

pipelines:
  branches:
    ######################################################################
    # Master branch: Do full release for each image flavour
    ######################################################################
    master:
      - step:
          name: Check if pipelines config is up-to-date...
          script:
            - ./release-maker/pipelines-init.sh
            - python3 pipelines-generator.py > bitbucket-piplines.yml.expected && diff bitbucket-pipelines.yml bitbucket-piplines.yml.expected

      - parallel:
{% for (name, pdata) in images.items() %}
  {% for (jdkver, appdata) in pdata.items() %}
    {% for offset in range(0, batches) %}

        - step:
            name: {{ name }} JDK {{ jdkver }} - Batch {{ offset + 1 }}
            services:
              - docker
            script:
                - ./release-maker/pipelines-init.sh
                - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
                - >
                python ./release-maker/make-releases.py \
                  --update \
                  --start-version='{{ appdata.start_version }}' \
                  --end-version='{{ appdata.end_version }}' \
                  {% if appdata.default_release %}
                  --default-release \
                  {% endif %}
                  --dockerfile-buildargs='ARTEFACT_NAME={{ appdata.artefact }},BASE_IMAGE=adoptopenjdk:{{ jdkver }}-hotspot' \
                  --dockerfile-version-arg='JIRA_VERSION' \
                  --mac-product-key='{{ appdata.mac_key }}' \
                  --tag-suffixes='{{ appdata.tag_suffixes|join(',') }}' \
                  --concurrent-builds='1' \
                  --job-offset='{{ offset }}' \
                  --jobs-total='{{ batches }}' \
                  --docker-repos='{{ appdata.docker_repos|join(',') }}' \
                  --push
 
    {% endfor %}
  {% endfor %}
{% endfor %}

      - step:
          name: Update README
          script:
            - ./release-maker/pipelines-init.sh
            - export DOCKER_REPO='atlassian/jira-software'
            - python shared-components/image/push-readme.py
            - export DOCKER_REPO='atlassian/jira-servicemanagement'
            - python shared-components/image/push-readme.py
            - export DOCKER_REPO='atlassian/jira-servicedesk'
            - python shared-components/image/push-readme.py
            - export DOCKER_REPO='atlassian/jira-core'
            - python shared-components/image/push-readme.py

    ######################################################################
    # All other branches & PRs; run unit tests & functional tests
    # against latest app version
    ######################################################################
    '**':
      - step:
          name: Check if pipelines config is up-to-date...
          script:
            - ./release-maker/pipelines-init.sh
            - python3 pipelines-generator.py > bitbucket-piplines.yml.expected && diff bitbucket-pipelines.yml bitbucket-piplines.yml.expected

      - parallel:
        - step:
            name: Run unit tests
            image: python:3.7-alpine3.14
            services:
              - docker
            script:
              - ./release-maker/pipelines-init.sh
              - pip install -q -r shared-components/tests/requirements.txt
              - export PYTHONPATH=./shared-components/tests:$PYTHONPATH
              - export DOCKERFILE='Dockerfile'
              - export DOCKERFILE_BUILDARGS='ARTEFACT_NAME=atlassian-jira-software'
              - export DOCKERFILE_VERSION_ARG='JIRA_VERSION'
              - export MAC_PRODUCT_KEY='jira-software'
              - py.test -v tests/
              - py.test -v shared-components/tests/
              - export DOCKERFILE_BUILDARGS='ARTEFACT_NAME=atlassian-jira-software,BASE_IMAGE=adoptopenjdk:11-hotspot'
              - py.test -v tests/
              - py.test -v shared-components/tests/
        - step:
            name: Run functional tests
            services:
              - docker
            script:
              - ./release-maker/pipelines-init.sh
              - export JIRA_VERSION=`curl -s https://marketplace.atlassian.com/rest/2/products/key/jira/versions/latest | jq -r .name`
              - docker build --build-arg JIRA_VERSION=${JIRA_VERSION} -t test-image .
              - export IS_RELEASE=false
              - export RUN_FUNCTESTS=true
              - ./release-maker/post_build.sh test-image $IS_RELEASE $RUN_FUNCTESTS

        - step:
            name: JDK 11 Release Build
            services:
              - docker
            script:
              - ./release-maker/pipelines-init.sh
              - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
              - >
                python ./release-maker/make-releases.py \
                  --update \
                  --start-version='8.19.0' \
                  --end-version='9' \
                  --dockerfile-buildargs='ARTEFACT_NAME=atlassian-jira-software,BASE_IMAGE=adoptopenjdk:11-hotspot' \
                  --dockerfile-version-arg='JIRA_VERSION' \
                  --mac-product-key='jira-software' \
                  --tag-suffixes='jdk11,ubuntu-jdk11' \
                  --concurrent-builds='1' \
                  --job-offset=0 \
                  --jobs-total=1 \
                  --docker-repos='atlssmith/jira-software'


  ######################################################################
  # Custom builds; these are triggered manually or via timer.
  ######################################################################
  custom:
    new-releases:
      - parallel:
{% for (name, pdata) in images.items() %}
  {% for (jdkver, appdata) in pdata.items() %}
    {% for offset in range(0, batches) %}

        - step:
            name: {{ name }} JDK {{ jdkver }} - Batch {{ offset + 1 }}
            services:
              - docker
            script:
              - ./release-maker/pipelines-init.sh
              - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
              - >
                python ./release-maker/make-releases.py \
                  --create --create-eap \
                  --start-version='{{ appdata.start_version }}' \
                  --end-version='{{ appdata.end_version }}' \
                  {% if appdata.default_release %}
                  --default-release \
                  {% endif %}
                  --dockerfile-buildargs='ARTEFACT_NAME={{ appdata.artefact }},BASE_IMAGE=adoptopenjdk:{{ jdkver }}-hotspot' \
                  --dockerfile-version-arg='JIRA_VERSION' \
                  --mac-product-key='{{ appdata.mac_key }}' \
                  --tag-suffixes='{{ appdata.tag_suffixes|join(',') }}' \
                  --concurrent-builds='1' \
                  --job-offset='{{ offset }}' \
                  --jobs-total='{{ batches }}' \
                  --docker-repos='{{ appdata.docker_repos|join(',') }}' \
                  --push

    {% endfor %}
  {% endfor %}
{% endfor %}
